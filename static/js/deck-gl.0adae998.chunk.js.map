{"version":3,"sources":["components/common/map/useMapHooks.tsx","components/common/map/DeckGLComponent.tsx"],"names":["useStyles","makeStyles","theme","tooltip","typography","caption","position","padding","spacing","borderRadius","shape","backgroundColor","palette","grey","color","transform","display","top","left","width","height","marginLeft","borderLeft","borderRight","borderTop","useMapHooks","classes","dispatch","useDispatch","isHovering","handleViewStateChange","viewState","setViewState","handleSizeChange","handleHover","object","handleCursor","isDragging","handleTooltip","info","html","className","style","background","DeckGLComponent","layers","useSelector","state","carto","basemap","BASEMAPS","useTheme","isMobile","useMediaQuery","breakpoints","down","controller","onViewStateChange","onResize","onHover","getCursor","getTooltip","pickingRadius","mapLib","maplibregl","reuseMaps","mapStyle","options","styleDiffing","workerClass","maplibreglWorker"],"mappings":"4HAAA,iEAUA,MAAMA,EAAYC,aAAYC,IAAD,CAC3BC,QAAS,CACP,aAAc,IACTD,EAAME,WAAWC,QACpBC,SAAU,WACVC,QAASL,EAAMM,QAAQ,EAAG,KAC1BC,aAAcP,EAAMQ,MAAMD,aAC1BE,gBAAiBT,EAAMU,QAAQC,KAAK,KACpCC,MAAO,4BACPC,UAAU,gCAAD,OAAkCb,EAAMM,QAAQ,KAAhD,QAET,WAAY,CACVQ,QAAS,QACTV,SAAU,WACVW,IAAK,mBACLC,KAAM,MACNC,MAAO,EACPC,OAAQ,EACRC,WAAYnB,EAAMM,SAAS,GAC3Bc,WAAW,GAAD,OAAKpB,EAAMM,QAAQ,GAAnB,wBACVe,YAAY,GAAD,OAAKrB,EAAMM,QAAQ,GAAnB,wBACXgB,UAAU,GAAD,OAAKtB,EAAMM,QAAQ,GAAnB,oBAAiCN,EAAMU,QAAQC,KAAK,aAM9D,SAASY,IACd,MAAMC,EAAU1B,IACV2B,EAAWC,cAEjB,IAAIC,GAAa,EAmCjB,MAAO,CACLC,sBAlC4B,IAA8C,IAA7C,UAAEC,GAA0C,EACzEJ,EAASK,uBAAaD,GAAtB,EAkCAE,iBA/BuB,IAMlB,IANmB,MACxBd,EADwB,OAExBC,GAII,EACJO,EAASK,uBAAa,CAAEb,QAAOC,WAA/B,EAyBAc,YAtBkB,QAAC,OAAEC,GAAH,SACjBN,IAAeM,CADE,EAuBlBC,aArBmB,QAAC,WAAEC,GAAH,SACnBA,EAAa,WAAaR,EAAa,UAAY,MADhC,EAsBnBS,cAnBqBC,IAAmB,IAAD,EACvC,cAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAMJ,cAAV,OAAI,EAAcK,KACT,CACLA,KAAK,wBAAD,OAA0BD,EAAKJ,OAAOK,KAAtC,mCACJC,UAAWf,EAAQvB,QACnBuC,MAAO,CACLnC,QAAS,EACToC,WAAY,SAIX,IAAP,EAUH,C,mCCnFD,6JAiBe,SAASC,EAAT,GAAyD,IAAhC,OAAEC,GAA6B,EACrE,MAAMd,EAAYe,aAAaC,GAAqBA,EAAMC,MAAMjB,YAC1DkB,EAAUH,aAEbC,GAAqBG,WAASH,EAAMC,MAAMC,WAEvC/C,EAAQiD,cACRC,EAAWC,YAAcnD,EAAMoD,YAAYC,KAAK,QAChD,aACJnB,EADI,YAEJF,EAFI,iBAGJD,EAHI,cAIJK,EAJI,sBAKJR,GACEL,cAEJ,OAEE,aADA,CACC,IAAD,CACEM,UAAW,IAAKA,GAChByB,YAAY,EACZX,OAAQA,EACRY,kBAAmB3B,EACnB4B,SAAUzB,EACV0B,QAASzB,EACT0B,UAAWxB,EACXyB,WAAYvB,EACZwB,cAAeV,EAAW,GAAK,EATjC,SAWE,cAAC,IAAD,CACEW,OAAQC,IACRC,WAAS,EACTC,SAAUjB,EAAQkB,QAAQD,SAC1BE,cAAc,KAIrB,CAvCDJ,IAAWK,YAAcC,G","file":"static/js/deck-gl.0adae998.chunk.js","sourcesContent":["import { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core';\nimport { setViewState, ViewState } from '@carto/react-redux';\n\ninterface Tooltip {\n  object?: {\n    html?: string;\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tooltip: {\n    '& .content': {\n      ...theme.typography.caption,\n      position: 'relative',\n      padding: theme.spacing(1, 1.5),\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: theme.palette.grey[900],\n      color: 'rgba(255, 255, 255, 0.75)',\n      transform: `translate(-50%, calc(-100% - ${theme.spacing(2.5)}px))`,\n\n      '& .arrow': {\n        display: 'block',\n        position: 'absolute',\n        top: 'calc(100% - 1px)',\n        left: '50%',\n        width: 0,\n        height: 0,\n        marginLeft: theme.spacing(-1),\n        borderLeft: `${theme.spacing(1)}px solid transparent`,\n        borderRight: `${theme.spacing(1)}px solid transparent`,\n        borderTop: `${theme.spacing(1)}px solid ${theme.palette.grey[900]}`,\n      },\n    },\n  },\n}));\n\nexport function useMapHooks() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  let isHovering = false;\n\n  const handleViewStateChange = ({ viewState }: { viewState: ViewState }) => {\n    dispatch(setViewState(viewState));\n  };\n\n  const handleSizeChange = ({\n    width,\n    height,\n  }: {\n    width: number;\n    height: number;\n  }) => {\n    dispatch(setViewState({ width, height }));\n  };\n\n  const handleHover = ({ object }: { object: Tooltip['object'] }) =>\n    (isHovering = !!object);\n  const handleCursor = ({ isDragging }: { isDragging: boolean }) =>\n    isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab';\n\n  const handleTooltip = (info: Tooltip) => {\n    if (info?.object?.html) {\n      return {\n        html: `<div class='content'>${info.object.html}<div class='arrow'></div></div>`,\n        className: classes.tooltip,\n        style: {\n          padding: 0,\n          background: 'none',\n        },\n      };\n    }\n    return null;\n  };\n\n  return {\n    handleViewStateChange,\n    handleSizeChange,\n    handleHover,\n    handleCursor,\n    handleTooltip,\n  };\n}\n","// @ts-ignore\nimport DeckGL from '@deck.gl/react';\nimport { useSelector } from 'react-redux';\nimport { useTheme, useMediaQuery } from '@material-ui/core';\nimport { BASEMAPS } from '@carto/react-basemaps';\nimport { Map } from 'react-map-gl';\nimport { RootState } from 'store/store';\nimport { useMapHooks } from './useMapHooks';\n\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport maplibregl from '!maplibre-gl';\n// @ts-ignore\nimport maplibreglWorker from 'maplibre-gl/dist/maplibre-gl-csp-worker';\n// @ts-ignore\nmaplibregl.workerClass = maplibreglWorker;\n\nexport default function DeckGLComponent({ layers }: { layers: any[] }) {\n  const viewState = useSelector((state: RootState) => state.carto.viewState);\n  const basemap = useSelector(\n    // @ts-ignore\n    (state: RootState) => BASEMAPS[state.carto.basemap],\n  );\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n  const {\n    handleCursor,\n    handleHover,\n    handleSizeChange,\n    handleTooltip,\n    handleViewStateChange,\n  } = useMapHooks();\n\n  return (\n    // @ts-ignore\n    <DeckGL\n      viewState={{ ...viewState }}\n      controller={true}\n      layers={layers}\n      onViewStateChange={handleViewStateChange}\n      onResize={handleSizeChange}\n      onHover={handleHover}\n      getCursor={handleCursor}\n      getTooltip={handleTooltip as any}\n      pickingRadius={isMobile ? 10 : 0}\n    >\n      <Map\n        mapLib={maplibregl}\n        reuseMaps\n        mapStyle={basemap.options.mapStyle}\n        styleDiffing={false}\n      />\n    </DeckGL>\n  );\n}\n"],"sourceRoot":""}